# -*- coding: utf-8 -*-
"""Student_score_predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hO88uNY5AxlVz1KLLwYYqxDwKuH-P8mt
"""

# Student Score Predictor
# Introduction
#	Brief: This project predicts student math scores based on reading scores using Linear Regression.

from google.colab import files
upload =files.upload()

# Import Libraries
# We import the required libraries for data handling, visualization, model building, and evaluation.

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error,mean_squared_error,root_mean_squared_error,r2_score

# Load and Explore Data
# Let's read the dataset and understand its structure with .head(), .describe(), and .info().

students_data = pd.read_csv('StudentsPerformance.csv')
print(students_data)

students_data.head()

students_data.describe()

students_data.info()

# Data Visualization
# We visualize the data to see trends and relationships between features.
# Line plot
# A simple line plot of math scores for all students.

plt.figure(figsize=(8,5))
plt.plot(students_data.index, students_data["math score"], label = "Math Score Line")
plt.title("Math Score Line Plot")
plt.xlabel("Students")
plt.ylabel("Math Score")
plt.legend()
plt.show()

#Scatter Plot -  to see if students with higher reading scores also get higher math scores.
#Scatter plot to check correlation between reading and math scores.

plt.figure(figsize=(8, 6))
plt.scatter(students_data["reading score"], students_data["math score"], color="green", marker="o", label="Student Scores")
plt.title("Reading Score vs. Math Score")
plt.xlabel("Reading Score")
plt.ylabel("Math Score")
plt.legend()
plt.show()

#Histogram - to show  how scores are distributed — e.g., how many students scored in each range.
#Distribution of students’ math scores.

plt.figure(figsize=(8, 6))
plt.hist(students_data["math score"], bins=10, color="skyblue", edgecolor="black")
plt.title("Distribution of Math Scores")
plt.xlabel("Math Score")
plt.ylabel("Number of Students")
plt.show()

# Separate features and target
# We define the input (reading score) and output (math score).

x = students_data[['reading score']]     # Feature column must be 2D
y = students_data['math score']      # Target column

# Split into training and testing data
# Split the dataset into training and test sets (80-20).

x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
# Training the Linear Regression model.

reg = LinearRegression()
reg.fit(x_train, y_train)

# Make predictions on the test set

y_pred = reg.predict(x_test)

# Print model parameters

print("Slope (Coefficient):", reg.coef_)
print("Intercept:", reg.intercept_)

# Compare actual vs predicted values

results = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print("Result:", results)

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = mse ** 0.5
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"R-squared (R²): {r2:.2f}")

print("Actual:", y_test[:5])
print("Predicted:", y_pred[:5])

plt.scatter(y_test, y_test - y_pred)
plt.axhline(0, color='red', linestyle='--')
plt.xlabel("Actual Score")
plt.ylabel("Residual (Error)")
plt.title("Residual Plot")
plt.show()

"""Project Summary:
***`This notebook predicts student scores based on hours studied using Linear Regression. Dataset: dummy dataset with 25 records. Steps include data cleaning, visualization, model training, evaluation (R², MAE), and predictions.`***
"""